#!/usr/bin/sh
# This script provides some metrics how often the compiler is replacing function parameters with constants
# This script looks for parameters that are AT_const_value_name and examine the first entry in the
# location list to see if it contains a DW_OP_implicit_pointer, DW_OP_implicit_value, or DW_OP_stack_value.

if [ "$#" -ne 1 ]; then
    echo "Expect a path to a file to analyze" >&2
    exit 1
fi

# Determine number of actual functions
FUNC_NO=$(dwgrep "$1" -e 'let A := entry (?TAG_subprogram) (?AT_ranges || ?AT_low_pc); [A name]' | grep "\[" | wc -l)

# Determine number of inlined functions
INL_FUNC_NO=$(dwgrep "$1" -e 'let A := entry (?TAG_inlined_subroutine) (?AT_ranges || ?AT_low_pc); [A name]' | grep "\[" | wc -l)

# Determine number of actual function parameters
FUNC_PARM_NO=$(dwgrep "$1" -e '
let A := entry (?TAG_subprogram) (?AT_ranges || ?AT_low_pc);
let FSTART := ((A ?AT_entry_pc @AT_entry_pc) || (A ?AT_ranges @AT_ranges low) || ( A low));
let PARM := (A child ?TAG_formal_parameter);
[A name, FSTART, PARM name]' | grep "\[" | wc -l)

# Determine number of inlined function parameters
INL_FUNC_PARM_NO=$(dwgrep "$1" -e '
let A := entry (?TAG_inlined_subroutine) (?AT_ranges || ?AT_low_pc);
let FSTART := ((A ?AT_entry_pc @AT_entry_pc) || (A ?AT_ranges @AT_ranges low) || ( A low));
let PARM := (A child ?TAG_formal_parameter);
[A name, FSTART, PARM name]' | grep "\[" | wc -l)

# Determine number of const parameters in actual functions
FUNC_CONST_PARM_NO=$(dwgrep "$1" -e '
let A := entry (?TAG_subprogram) (?AT_ranges || ?AT_low_pc);
let FSTART := ((A ?AT_entry_pc @AT_entry_pc) || (A ?AT_ranges @AT_ranges low) || ( A low));
let CONST_NAME := A child (|ARG| ARG ?TAG_formal_parameter (?AT_const_value name ||
  ?AT_location (@AT_location (?DW_OP_implicit_pointer || ?DW_OP_implicit_value || ?DW_OP_stack_value) ?(pos == 0) ARG name)));
[A name, FSTART, CONST_NAME]' | grep "\[" | wc -l)

# Determine number of const parameters in inlined functions functions
INL_FUNC_CONST_PARM_NO=$(dwgrep "$1" -e '
let A := entry (?TAG_inlined_subroutine) (?AT_ranges || ?AT_low_pc);
let FSTART := ((A ?AT_entry_pc @AT_entry_pc) || (A ?AT_ranges @AT_ranges low) || ( A low));
let CONST_NAME := A child (|ARG| ARG ?TAG_formal_parameter (?AT_const_value name ||
  ?AT_location (@AT_location (?DW_OP_implicit_pointer || ?DW_OP_implicit_value || ?DW_OP_stack_value) ?(pos == 0) ARG name)));
[A name, FSTART, CONST_NAME]' | grep "\[" | wc -l)

# Determine number of actual functions with one or more const parameters
FUNC_WITH_CONST_PARM_NO=$(dwgrep "$1" -e '
let A := entry (?TAG_subprogram) (?AT_ranges || ?AT_low_pc);
let FSTART := ((A ?AT_entry_pc @AT_entry_pc) || (A ?AT_ranges @AT_ranges low) || ( A low));
let CONST_NAME := [ A child (|ARG| ARG ?TAG_formal_parameter (?AT_const_value name ||
  ?AT_location (@AT_location (?DW_OP_implicit_pointer || ?DW_OP_implicit_value || ?DW_OP_stack_value) ?(pos == 0) ARG name))) ];
?(CONST_NAME length > 0)[A name, FSTART, CONST_NAME]' | grep "\[" | wc -l)

# Determine number of inlined functions with one or more const parameters
INL_FUNC_WITH_CONST_PARM_NO=$(dwgrep "$1" -e '
let A := entry (?TAG_inlined_subroutine) (?AT_ranges || ?AT_low_pc);
let FSTART := ((A ?AT_entry_pc @AT_entry_pc) || (A ?AT_ranges @AT_ranges low) || ( A low));
let CONST_NAME := [ A child (|ARG| ARG ?TAG_formal_parameter (?AT_const_value name ||
  ?AT_location (@AT_location (?DW_OP_implicit_pointer || ?DW_OP_implicit_value || ?DW_OP_stack_value) ?(pos == 0) ARG name))) ];
?(CONST_NAME length > 0)[A name, FSTART, CONST_NAME]' | grep "\[" | wc -l)

FRAC_FUNC_WITH_CONST=$(echo "${FUNC_WITH_CONST_PARM_NO} / ${FUNC_NO} * 100" | bc -l)
FRAC_INL_FUNC_WITH_CONST=$(echo "${INL_FUNC_WITH_CONST_PARM_NO} / ${INL_FUNC_NO} * 100" | bc -l)
FRAC_FUNC_PARM_CONST=$(echo "${FUNC_CONST_PARM_NO} / ${FUNC_PARM_NO} * 100" | bc -l)
FRAC_INL_FUNC_PARM_CONST=$(echo "${INL_FUNC_CONST_PARM_NO} / ${INL_FUNC_PARM_NO} * 100" | bc -l)

# Output metrics
echo "Functions = ${FUNC_NO}"
echo "Inlined Functions = ${INL_FUNC_NO}"
echo "Functions parameters = ${FUNC_PARM_NO}"
echo "Inlined functions parameters = ${INL_FUNC_PARM_NO}"
echo "Functions const parameters = ${FUNC_CONST_PARM_NO}"
echo "Inlined functions const parameters = ${INL_FUNC_CONST_PARM_NO}"
echo ""
echo "Functions with one (or more) const parameters = ${FUNC_WITH_CONST_PARM_NO}"
echo "Inlined functions with one (or more) const parameters = ${INL_FUNC_WITH_CONST_PARM_NO}"
echo ""
echo "Functions with const parameters = ${FRAC_FUNC_WITH_CONST}%"
echo "Inlined functions with const parameters = ${FRAC_INL_FUNC_WITH_CONST}%"
echo "Function parameters constant = ${FRAC_FUNC_PARM_CONST}%"
echo "Inlined function parameters constant = ${FRAC_INL_FUNC_PARM_CONST}%"
