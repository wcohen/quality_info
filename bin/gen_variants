#! /bin/bash
# a script to mechanically generate a bunch of compilation variants
#
#
#Scope: Platforms {RHEL8,Rawhide}
#        Compilers {GCC,LLVM}
#       Architectures {x86-64,ppc64le} (?)
#       CFLAGS {-O0,-O2} x {-flto,} x {-g,-gdwarf-4,-gdwarf-5} x {-gsplit-dwarf,}
#       Consumers {systemtap,gdb,lldb} (?)
#       upon some nontrivial program, like systemtap


build_rpm () {
  compiler="$1"
  options="$2"
  variant="$3"
  spec_file="$4"
  case $compiler in
    gcc) 
      cc=gcc
      cxx=g++
      ;;
    clang)
      cc=clang
      cxx=clang++
      ;;
    *)
      echo "unknown compiler $compiler"
      exit 1
      ;;
    esac
    echo export CC=$cc
    echo export CXX=$cxx
    echo building "rpmbuild --define \"%optflags $options\" --define \"%dist $name\" -bi $spec_file"
    export CC=$cc
    export CXX=$cxx
    rpmbuild --define "%optflags $options" --define "%dist $variant" -bi $spec_file
}

set_debug_links () {
    broot=$1
    pushd ${broot}
    exec_dirs=$(find -type f -executable -exec file -i '{}' \; | grep 'charset=binary' | awk -F: '{print $1}' | sed 's/\(.*\)\/.*/\1/' |sort|uniq)
    for a_dir in $exec_dirs ; do
	rm -rf ${broot}/${a_dir}/.debug
	ln -s  ${broot}/usr/lib/debug/${a_dir} ${broot}/${a_dir}/.debug
    done
    popd
}

analyze_rpm () {
  compiler="$1"
  options="$2"
  variant="$3"
  spec_file="$4"
  file_of_interest=$5
  echo "analyze"
  #find the directory
  echo $spec_file
  base=${spec_file%.spec}
  echo $base
  broot=$(ls -d ~/rpmbuild/BUILDROOT/${base}*${variant}.*)
  if test -z ${broot}; then
      # exit 1
      return
  fi
  bdir=/usr/bin
  ldir=$(rpm --eval "%_libdir")
  # set up debuginfo links
  set_debug_links ${broot}
  # compute some simple metrics
  # count number of statements with a line record
  #    (= number of breakpointable points)
  foi=$(basename ${file_of_interest})
  foi_dir=$(dirname ${file_of_interest})
  pushd ${broot}${foi_dir}
  probe_lines="process(\"./${foi}\").statement(\"*@*:*\")"
  num_breakpoints=$(stap -l ${probe_lines} | wc -l)
  # then for all statements with a line record,
  #    count number of variables with consumer-supported location lists
  probe_variables="process(\"./${foi}\").statement(\"*@*:*\")"
  num_variables=$(stap -L ${probe_variables} | sed "s, \\$,\n \\$,g" |grep -c " \\$")
  popd
  # store the info
  key=$(echo $name | tr '_' ',' |tr -d '.')
  #add arch to variant info to key
  key="${key},$(arch)"
  echo $key $num_breakpoints $num_variables >> $data_file
}

driver () {
  spec_file=$1
  file_of_interest=$2
  arch=$(arch)
  base_name=$(rpm --eval "%dist")
  orig_optflags=$(rpm --eval %optflags)
  #remove -g and -O2
  base_optflags=${orig_optflags/-g/}
  base_optflags=${base_optflags/-O2/}
  for compiler in "gcc" "clang" ; do
    for lto in "" "-flto -ffat-lto-objects"; do
      for opt_level in "-O2" "-O0"; do
        for debug in "-g" "-gdwarf-4" "-gdwarf-5"; do
          for split in "" "-gsplit-dwarf"; do
	     optflags="$lto $opt_level $debug $split $base_optflags"
	     case $compiler in
	     gcc) compiler_name="_gcc" ;;
	     clang) compiler_name="_llvm" ;;
	     esac
	     if test -n "$lto"; then
	       lto_name="_lto"
	     else
	       lto_name="_"
	     fi
	     case $opt_level in
	     -O0) opt_name="_o0" ;;
	     -O2) opt_name="_o2" ;;
	     esac
	     case $debug in
	     -g) debug_name="_g" ;;
	     -gdwarf-4) debug_name="_d4" ;;
	     -gdwarf-5) debug_name="_d5" ;;
	     esac
	     case $split in
	     -gsplit-dwarf) split_name="_split" ;;
	     *) split_name="_" ;;
	     esac
	     # generate name
	     name="${base_name}${compiler_name}${opt_name}${lto_name}${debug_name}${split_name}"
	     echo "$compiler" "$optflags" "$name" "$spec_file"
	     build_rpm "$compiler" "$optflags" "$name" "$spec_file"
	     analyze_rpm "$compiler" "$optflags" "$name" "$spec_file" "$file_of_interest"
	  done
	done
      done
    done
  done
}

exec_base_name=$(basename $2)
pwd=$(pwd)
data_file="$(pwd)/${exec_base_name}_data_file.txt"
rm -rf ${data_file}
driver $1 $2
